#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define ___ &trans

#define T_1        &kp LG(LC(N1))
#define T_2        &kp LG(LC(N2))
#define T_3        &kp LG(LC(N3))
#define T_4        &kp LG(LC(N4))
#define T_5        &kp LG(LC(N5))
#define T_6        &kp LG(LC(N6))
#define T_7        &kp LG(LC(N7))
#define T_8        &kp LG(LC(N8))
#define T_9        &kp LG(LC(N9))
#define T_0        &kp LG(LC(N0))


MIRYOKU_LAYER_LIST \
MIRYOKU_X(BASE,   "Base") \
MIRYOKU_X(EXTRA,  "Extra") \
MIRYOKU_X(TAP,    "Tap") \
MIRYOKU_X(BUTTON, "Button") \
MIRYOKU_X(NAV,    "Nav") \
MIRYOKU_X(MOUSE,  "Mouse") \
MIRYOKU_X(MEDIA,  "Media") \
MIRYOKU_X(NUM,    "Num") \
MIRYOKU_X(SYM,    "Sym") \
MIRYOKU_X(FUN,    "Fun")

#define U_BASE   0
#define U_EXTRA  1
#define U_TAP    2
#define U_BUTTON 3
#define U_NAV    4
#define U_MOUSE  5
#define U_MEDIA  6
#define U_NUM    7
#define U_SYM    8
#define U_FUN    9


urob_LAYER_LIST

#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define SYS 4
#define MOUSE 5


*/

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <1>;
};

&inc_dec_kp {
    tap-ms = <0>;
    bindings = <&kp>, <&kp>;
};

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};


/ {
    macros {
        macro_dot_shift: macro_dot_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk_qr LSHFT>;
            label = "MACRO_DOT_SHIFT";
        };

        macro_mouse_jump: to_mouse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RG(D)) &to 5>;
            label = "TO_MOUSE";
        };

        macro_to_0_click: macro_to_0_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp RCLK &to 0>;
            label = "MACRO_TO_0_CLICK";
        };

        macro_sel_word: macro_sel_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "MACRO_SEL_WORD";
        };

        macro_sel_line: macro_sel_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "MACRO_SEL_LINE";
        };

        macro_win_sleep: macro_win_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
            label = "MACRO_WIN_SLEEP";
            wait-ms = <500>;
            tap-ms = <5>;
        };

        macro_swapper: macro_swapper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LALT>;

            label = "MACRO_SWAPPER";
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <21 22 23 41 20 7 8 33 34 35 36 37 38 25 24 11 12 10 9 44 45 46 14 40 42>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <14 15 16 17 0 1 13 26 27 28 29 30 31 5 2 3 4 18 23 45 46 44>;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <50>;
            hold-trigger-key-positions = <21 22 23 24>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <300>;
        };

        num_word: num_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <BSPC DEL KP_DOT DOT COMMA KP_PLUS PLUS KP_MINUS MINUS KP_MULTIPLY STAR KP_DIVIDE FSLH EQUAL>;
            ignore-numbers;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&num_word>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <41>;
        };

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;

            tap-ms = <5>;
        };

        scroll_encoder: scroll_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <5>;
            label = "scroll_encoder";
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        tap_dot_shift: tap_dot_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dot_shift";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&macro_dot_shift>;

            tapping-term-ms = <400>;
        };

        tap_copy_cut: tap_copy_cut {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_COPY_CUT";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp LC(C)>, <&kp LC(X)>;
        };

        sk_qr: sk_qr {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_QR";
            bindings = <&sk>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <900>;
        };

        morph_column: morph_column {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_COLUMN";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        to0 {
            bindings = <&to 0>;
            key-positions = <0 1>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 2 4>;
            layers = <0>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 8 10>;
            layers = <0>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
            layers = <0>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 30 28>;
            layers = <0>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <34 35 36>;
            layers = <0>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 7>;
            layers = <1>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <31 33>;
            layers = <1>;
        };

        to_mouse {
            bindings = <&macro_mouse_jump>;
            key-positions = <14 24>;
        };

        to_nav {
            bindings = <&to 4>;
            key-positions = <18 21>;
        };

        Tab_v1 {
            bindings = <&kp TAB>;
            key-positions = <17 16>;
        };

        Enter-rh {
            bindings = <&kp RET>;
            key-positions = <22 21>;
            require-prior-idle-ms = <25>;
        };

        tap_copy_cut {
            bindings = <&tap_copy_cut>;
            key-positions = <28 29>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <29 30>;
        };

        Enter_v2 {
            bindings = <&kp RET>;
            key-positions = <17 3>;
        };

        Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <27 28>;
        };

        Redo {
            bindings = <&kp LS(LC(Z))>;
            key-positions = <26 27>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <20 21>;
        };

        dot_shift {
            bindings = <&macro_dot_shift>;
            key-positions = <38 12>;
        };

        ctrl_space {
            bindings = <&kp LC(SPACE)>;
            key-positions = <17 41>;
        };

        Shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <17 16 15>;
        };

        Tab_v2 {
            bindings = <&kp TAB>;
            key-positions = <17 4>;
        };

        Enter_v {
            bindings = <&kp RET>;
            key-positions = <21 8>;
        };
    };

    #define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2   // thumbs
    /*                42 KEY MATRIX with ENCODER and JOYSTICK / LAYOUT MAPPING

  ╭──────────────────────────────╮              ╭─────╮      ╭──────────────────────────────╮
  │ LT5  LT4  LT3  LT2  LT1  LT0 │          ╭───╯ JS0 ╰───╮  │ RT0  RT1  RT2  RT3  RT4  RT5 │
  │ LM5  LM4  LM3  LM2  LM1  LM0 │ ╭─────╮  │ JS1 JS2 JS3 │  │ RM0  RM1  RM2  RM3  RM4  RM5 │
  │ LB5  LB4  LB3  LB2  LB1  LB0 │ │ LEC │  ╰───╮ JS4 ╭───╯  │ RB0  RB1  RB2  RB3  RB4  RB5 │
  ╰──────────────╮ LH2  LH1  LH0 │ ╰─────╯      ╰─────╯      │ RH0  RH1  RH2 ╭──────────────╯
                 ╰───────────────╯                           ╰───────────────╯


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(

    NAME,
    bindings = <HOLD>, <TAP>;

    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
    hold-trigger-key-positions = <TRIGGER_POS>;

    )

MAKE_HRM(hmlx, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
    MAKE_HRM(hmrx, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)


// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(

    smart_num,
    bindings = <&mo>, <&num_dance>;

    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;

    )
ZMK_TAP_DANCE(

    num_dance,
    bindings = <&num_word NUM>, <&sl NUM>;

    tapping-term-ms = <200>;

    )

*/

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&ltq 12 F19       &as LS(F10) Q  &kp W            &kp E              &kp R         &kp T               &kp UP_ARROW    &kp Y       &kp U             &as HOME I           &as END O        &kp P             &kp EQUAL
&as F19 ESCAPE    &ltq 10 A      &hml LEFT_ALT S  &hml LEFT_SHIFT D  &hml LCTRL F  &hml LEFT_GUI G     &kp DOWN_ARROW  &kp H       &hmr RCTRL J      &hmr LEFT_SHIFT K    &hmr LEFT_ALT L  &ltq 5 SEMICOLON  &ltq 5 SQT
&ltq 3 BACKSPACE  &hml LGUI Z    &hml LALT X      &hml LSHFT C       &hml LCTRL V  &as LG(V) B         &kp LEFT        &kp N       &as HOME M        &as PAGE_DOWN COMMA  &tap_dot_shift   &as END SLASH     &kp MINUS
                                 &ltq 6 C_MUTE    &key_repeat        &ltq 4 SPACE  &smart_num 7 RET    &kp RIGHT       &ltq 6 RET  &ltq 8 BACKSPACE  &ltq 9 DELETE
                                                                                                       &to 5
            >;

            label = "BASE";
            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        EXTRA {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
                                                  &trans
            >;

            label = "EXTRA";
        };

        TAP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
                                                  &trans
            >;

            label = "TAP";
        };

        BUTTON {
            bindings = <
&trans  &kp LS(LG(LC(LA(Q))))  &kp LA(F4)  &kp LG(LC(LA(E)))  &kp LC(F24)        &kp LS(LG(LC(LA(T))))    &trans  &trans             &trans              &trans             &trans      &kp LG(LC(LA(P)))    &trans
&trans  &kp LG(LC(LA(T)))      &kp F24     &kp LS(F24)        &kp LG(LC(LA(F)))  &kp LG(LC(LA(G)))        &trans  &kp LG(LC(LA(H)))  &kp LG(LEFT_ARROW)  &kp LG(DOWN)       &kp LG(UP)  &kp LG(RIGHT_ARROW)  &trans
&trans  &macro_win_sleep       &trans      &kp LG(LC(LA(C)))  &kp LS(LC(V))      &kp LS(LG(LC(LA(B))))    &trans  &trans             &trans              &trans             &trans      &trans               &trans
                               &trans      &kp LG(LC(LA(H)))  &kp F24            &kp LS(F24)              &trans  &kp F24            &kp RS(F24)         &kp LG(LC(LA(H)))
                                                                                                          &trans
            >;

            label = "BUTTON";
            sensor-bindings = <&inc_dec_kp LC(LS(TAB)) LC(LS(TAB))>;
        };

        NAV {
            bindings = <
&bootloader     &kp LS(F10)         &kp LA(F4)           &kp ENTER                    &trans              &trans     &kp UP_ARROW    &kp C_BRIGHTNESS_INC   &kp HOME            &kp PG_DN       &kp PG_UP     &kp END              &trans
&kp ESCAPE      &hml LGUI LA(LEFT)  &hml LALT LA(RIGHT)  &hml LEFT_SHIFT LC(LS(TAB))  &hml LCTRL LC(TAB)  &to 0      &kp DOWN_ARROW  &to 0                  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW      &trans
&bt BT_CLR_ALL  &trans              &kp LC(W)            &trans                       &kp LG(V)           &trans     &kp LEFT        &kp C_BRIGHTNESS_AUTO  &kp LA(LEFT_ARROW)  &kp LC(HOME)    &kp LA(END)   &kp LA(RIGHT_ARROW)  &kp C_BRIGHTNESS_MAXIMUM
                                    &to 0                &kp F19                      &kp SPACE           &kp TAB    &kp RIGHT       &kp BACKSPACE          &kp SPACE           &kp DEL
                                                                                                                     &to 0
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
            label = "Nav";
        };

        Mouse {
            bindings = <
&to 0       &kp LS(F10)     &mmv MOVE_UP    &kp RET          &mkp LCLK          &msc SCRL_UP      &mmv MOVE_Y(-600)  &trans         &msc SCRL_DOWN        &msc SCRL_UP           &msc SCRL_UP  &msc SCRL_LEFT  &trans
&kp ESCAPE  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK          &msc SCRL_DOWN    &mmv MOVE_Y(-600)  &kp LS(LG(D))  &hmr RCTRL LG(RS(D))  &hmr RIGHT_SHIFT DOWN  &kp LALT      &kp LGUI        &trans
&to 0       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &macro_to_0_click  &msc SCRL_DOWN    &mmv MOVE_X(-600)  &trans         &msc SCRL_LEFT        &msc SCRL_LEFT         &trans        &trans          &to 0
                            &to 0           &mkp MCLK        &mkp RCLK          &mkp LCLK         &mmv MOVE_X(600)   &mkp LCLK      &mkp RCLK             &kp LS(LG(D))
                                                                                                  &to 0
            >;

            label = "Mouse";
            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        MEDIA {
            bindings = <
&bootloader     &trans                &kp LA(F4)            &trans                  &trans                   &trans            &kp LG(UP)     &bt BT_SEL 0        &bt BT_SEL 1             &bt BT_SEL 2                    &bt BT_SEL 3    &bt BT_SEL 4    &bootloader
&kp LG(TAB)     &kp LG(LC(NUMBER_1))  &kp LC(LG(NUMBER_2))  &kp LC(LG(NUMBER_3))    &kp LC(LG(NUMBER_4))     &kp LC(LG(N5))    &kp LG(DOWN)   &kp LC(LG(N6))      &kp LC(LG(N7))           &kp LG(LC(N8))                  &kp LC(LG(N9))  &kp LC(LG(N0))  &soft_off
&bt BT_CLR_ALL  &trans                &trans                &trans                  &trans                   &trans            &kp LG(LEFT)   &bt BT_NXT          &bt BT_PRV               &trans                          &trans          &trans          &bt BT_CLR_ALL
                                      &trans                &kp LS(LA(LC(LG(F9))))  &kp LS(LA(LC(LG(F11))))  &trans            &kp LG(RIGHT)  &as RG(TAB) C_PREV  &as C_MUTE C_PLAY_PAUSE  &as RS(RA(RC(RG(F11)))) C_NEXT
                                                                                                                               &trans
            >;

            label = "Media";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        NUM {
            bindings = <
&bootloader     &kp LBKT     &kp N7       &kp N8        &kp N9     &kp RBKT    &trans  &kp PLUS      &kp N7   &kp N8          &kp N9  &kp EQUAL  &trans
&trans          &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml N4 F  &kp N5      &trans  &kp MINUS     &kp N4   &kp N5          &kp N6  &kp N0     &trans
&bt BT_CLR_ALL  &kp GRAVE    &kp N1       &kp N2        &kp N3     &kp BSLH    &trans  &kp ASTRK     &kp N1   &kp N2          &kp N3  &kp FSLH   &trans
                             &trans       &kp MINUS     &kp SPACE  &kp DOT     &trans  &kp K_CANCEL  &kp DOT  &kp UNDERSCORE
                                                                               &trans
            >;

            label = "Num";
        };

        Symbol {
            bindings = <
&trans  &kp LEFT_BRACE   &kp AMPERSAND  &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &kp LCTRL  &kp AMPERSAND   &kp ASTERISK           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LC(LA(DELETE))
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH              &kp DOLLAR             &kp PERCENT        &trans  &kp CARET  &kp AMPERSAND   &kp ASTERISK           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp TILDE        &kp EXCL       &kp AT_SIGN           &kp POUND              &kp PIPE           &trans  &kp GRAVE  &as PLUS EQUAL  &as DOUBLE_QUOTES SQT  &as PIPE BACKSLASH    &kp DELETE             &kp LC(LS(ESCAPE))
                         &trans         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER          &trans  &trans     &trans          &trans
                                                                                                        &trans
            >;

            label = "Sym";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        Fn {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9     &trans     &trans  &kp F10  &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &kp F1   &kp F2  &kp F3  &kp F4     &kp F5     &trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3     &kp F11    &trans  &kp F12  &kp F1  &kp F2  &kp F3  &trans  &trans
                 &trans  &trans  &kp SPACE  &kp TAB    &trans  &trans   &trans  &trans
                                                       &trans
            >;

            label = "Fn";
        };

        L10 {
            bindings = <
&trans          &trans  &kp LA(F4)          &trans                    &trans                   &trans                            &trans  &trans        &trans                      &trans        &trans      &trans                        &kp LC(LA(DEL))
&macro_swapper  &trans  &hml LALT LA(LEFT)  &hml LSHFT LA(RIGHT)      &hml LCTRL LA(TAB)       &to 0                             &trans  &kp LG(TAB)   &hmr RG(RS(LEFT)) LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)  &hmr RG(RS(RIGHT)) RG(RIGHT)  &trans
&morph_column   &trans  &trans              &trans                    &kp LC(LS(V))            &trans                            &trans  &trans        &trans                      &trans        &trans      &trans                        &kp RS(RC(ESC))
                        &trans              &as LC(LA(LS(M))) C_PREV  &as C_MUTE C_PLAY_PAUSE  &as LS(LA(LC(LG(F11)))) C_NEXT    &trans  &kp QUESTION  &kp QUESTION                &kp CAPS
                                                                                                                                 &trans
            >;

            label = "L10";
        };

        Modify {
            bindings = <
&kp LG(Q)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5        &trans  &kp NUMBER_6       &kp NUMBER_7     &kp NUMBER_8       &kp NUMBER_9   &kp NUMBER_0   &trans
&trans     &kp LG(A)     &kp LG(S)     &kp LG(D)     &kp LG(F)     &kp LEFT_BRACKET    &trans  &kp RIGHT_BRACKET  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI  &trans
&trans     &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp LEFT_BRACE      &trans  &kp RIGHT_BRACE    &kp F1           &kp F2             &kp F3         &kp F4         &trans
                         &trans        &trans        &trans        &trans              &trans  &trans             &trans           &trans
                                                                                       &trans
            >;

            label = "Modify";
        };

        Rgb {
            bindings = <
&ext_power EP_TOG  &trans  &trans  &trans  &trans           &rgb_ug RGB_SPI    &rgb_ug RGB_HUI  &rgb_ug RGB_SPD  &trans           &trans  &trans  &trans  &trans
&trans             &trans  &trans  &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_EFR    &rgb_ug RGB_HUD  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &trans  &trans  &trans  &trans
&to 0              &trans  &trans  &trans  &trans           &trans             &rgb_ug RGB_SAI  &trans           &trans           &trans  &trans  &trans  &trans
                           &to 0   &trans  &trans           &trans             &rgb_ug RGB_SAD  &trans           &trans           &trans
                                                                               &rgb_ug RGB_TOG
            >;

            label = "Rgb";
            sensor-bindings = <&rgb_encoder &scroll_encoder>;
        };

        Flash {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &bt BT_CLR    &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
                &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans
                                                  &trans
            >;

            label = "Flash";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
